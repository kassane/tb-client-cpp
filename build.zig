//! Boost Software License - Version 1.0 - August 17th, 2003
//
//! Permission is hereby granted, free of charge, to any person or organization
//! obtaining a copy of the software and accompanying documentation covered by
//! this license (the "Software") to use, reproduce, display, distribute,
//! execute, and transmit the Software, and to prepare derivative works of the
//! Software, and to permit third-parties to whom the Software is furnished to
//! do so, all subject to the following:
//
//! The copyright notices in the Software and this entire statement, including
//! the above license grant, this restriction and the following disclaimer,
//! must be included in all copies of the Software, in whole or in part, and
//! all derivative works of the Software, unless such copies or derivative
//! works are solely in the form of machine-executable object code generated by
//! a source language processor.

const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const exe = b.addExecutable(.{
        .name = "tb-cpp",
        .target = target,
        .optimize = optimize,
    });
    exe.addIncludePath("include");
    exe.addCSourceFile("src/main.cpp", &.{
        "-std=c++20",
        "-Wall",
        "-Wextra",
    });

    // Dependencies

    // fmt
    const libfmt_dep = b.dependency("fmt", .{
        .target = target,
        .optimize = optimize,
    });
    const libfmt = libfmt_dep.artifact("fmt");
    // tigerbeetle
    // const libtb_dep = b.dependency("tigerbeetle", .{
    //     .target = target,
    //     .optimize = optimize,
    // });
    // const libtb = libtb_dep.artifact("tigerbeetle");

    exe.linkLibrary(libfmt);
    // exe.linkLibrary(libtb);
    exe.linkLibCpp(); // static-linking llvm-libcxx/abi + linking OS-libc

    exe.installLibraryHeaders(libfmt); // get copy fmt include

    b.installArtifact(exe); // get copy binaries from: zig-cache/ to zig-out/

    const run_cmd = b.addRunArtifact(exe);
    run_cmd.step.dependOn(b.getInstallStep());

    if (b.args) |args| {
        run_cmd.addArgs(args);
    }
    const run_step = b.step("run", b.fmt("Run the {s} app", .{exe.name}));
    run_step.dependOn(&run_cmd.step);
}
