/*
Copyright (c) 2023 Matheus Catarino Fran√ßa (matheus-catarino@hotmail.com)

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
*/

#ifdef USE_FMT
#ifndef TB_LOGGER_HPP
#define TB_LOGGER_HPP

#include <fmt/color.h>
#include <fmt/core.h>

namespace tigerbeetle {

enum class LogLevel {
  INFO,
  DEBUG,
  ERROR,
  WARN,
  TRACE,
};

class Logger {
public:
  static void warn(const std::string &message) {
    println(LogLevel::WARN, message);
  }
  static void trace(const std::string &message) {
    println(LogLevel::TRACE, message);
  }
  static void debug(const std::string &message) {
    println(LogLevel::DEBUG, message);
  }
  static void info(const std::string &message) {
    println(LogLevel::INFO, message);
  }
  static void error(const std::string &message) {
    println(LogLevel::ERROR, message);
  }

private:
  static fmt::color getLogLevelColor(LogLevel level) {
    switch (level) {
    case LogLevel::INFO:
      return fmt::color::green;
    case LogLevel::DEBUG:
      return fmt::color::cyan;
    case LogLevel::ERROR:
      return fmt::color::red;
    case LogLevel::WARN:
      return fmt::color::yellow;
    case LogLevel::TRACE:
      return fmt::color::white;
    }
    return static_cast<fmt::color>(
        0x000000); // Default color if the level is unknown
  }

  static void println(LogLevel level, const std::string &message) {
    fmt::color color = getLogLevelColor(level);
    fmt::print(fg(color), "[{}] {}\n", getLogLevelString(level), message);
  }

  static std::string getLogLevelString(LogLevel level) {
    switch (level) {
    case LogLevel::INFO:
      return "info";
    case LogLevel::DEBUG:
      return "debug";
    case LogLevel::ERROR:
      return "error";
    case LogLevel::WARN:
      return "warn";
    case LogLevel::TRACE:
      return "trace";
    }
    return "unknown"; // Default log level if unknown
  }
};
} // namespace tigerbeetle
#endif // TB_LOGGER_HPP
#endif // USE_FMT
