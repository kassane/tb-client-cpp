/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
*/

#pragma once
#include <array>
#include <chrono>
#include <fmt/color.h>
#include <fmt/core.h>
#include <memory>

namespace tigerbeetle {
#include <tb_client.h>

constexpr size_t MAX_MESSAGE_SIZE = (1024 * 1024) - 128;
template <std::size_t N> using accountID = std::array<tb_uint128_t, N>;
template <std::size_t N> using transferID = std::array<tb_uint128_t, N>;
template <std::size_t N> using transfer = std::array<tb_transfer_t, N>;
;
template <std::size_t N> using account = std::array<tb_account_t, N>;
;
template <std::size_t N> auto make_account() { return account<N>{}; }
template <std::size_t N> auto make_transfer() { return transfer<N>{}; }
// Synchronization context between the callback and the main thread.
struct CompletionContext {
  std::array<uint8_t, MAX_MESSAGE_SIZE> reply;
  int size;
  bool completed;
};

inline tb_packet_t *acquire_packet(tb_packet_list_t &packet_list) {
  // This sample is single-threaded,
  // In real use, this function should be thread-safe.
  tb_packet_t *packet = packet_list.head;

  if (packet == nullptr) {
    fmt::print("Too many concurrent requests\n");
    std::exit(-1);
  }

  packet_list.head = packet->next;
  packet->next = nullptr;

  if (packet_list.head == nullptr) {
    packet_list.tail = nullptr;
  }

  return packet;
}

inline void release_packet(tb_packet_list_t &packet_list, tb_packet_t *packet) {
  // This sample is single-threaded,
  // In real use, this function should be thread-safe.
  if (packet_list.head == nullptr) {
    packet_list.head = packet;
    packet_list.tail = packet;
  } else {
    packet_list.tail->next = packet;
    packet_list.tail = packet;
  }
}
inline void on_completion([[maybe_unused]] uintptr_t context,
                          [[maybe_unused]] tb_client_t client,
                          tb_packet_t *packet, const uint8_t *data,
                          uint32_t size) {
  auto ctx = static_cast<CompletionContext *>(packet->user_data);
  std::copy(data, data + size, ctx->reply.begin());
  ctx->size = size;
  ctx->completed = true;
}

inline void send_request(tb_client_t client, tb_packet_list_t *packets,
                         CompletionContext *ctx) {
  // Submits the request asynchronously:
  ctx->completed = false;
  tb_client_submit(client, packets);
  while (!ctx->completed) {
    // Wait for completion
  }
}

enum class LogLevel {
  INFO,
  DEBUG,
  ERROR,
  WARN,
  TRACE,
};

class Logger {
public:
  static void println(LogLevel level, const std::string &message) {
    fmt::color color = getLogLevelColor(level);
    fmt::print(fg(color), "[{}] {}\n", getLogLevelString(level), message);
  }

private:
  static fmt::color getLogLevelColor(LogLevel level) {
    switch (level) {
    case LogLevel::INFO:
      return fmt::color::green;
    case LogLevel::DEBUG:
      return fmt::color::cyan;
    case LogLevel::ERROR:
      return fmt::color::red;
    case LogLevel::WARN:
      return fmt::color::yellow;
    case LogLevel::TRACE:
      return fmt::color::white;
    }
    return static_cast<fmt::color>(
        0x000000); // Default color if the level is unknown
  }

  static std::string getLogLevelString(LogLevel level) {
    switch (level) {
    case LogLevel::INFO:
      return "INFO";
    case LogLevel::DEBUG:
      return "DEBUG";
    case LogLevel::ERROR:
      return "ERROR";
    case LogLevel::WARN:
      return "WARN";
    case LogLevel::TRACE:
      return "TRACE";
    }
    return "UNKNOWN"; // Default log level if unknown
  }
};

} // namespace tigerbeetle