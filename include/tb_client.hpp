/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
*/

#pragma once
#include <array>
#include <fmt/color.h>
#include <fmt/core.h>
#include <memory>
#include <stdexcept>

namespace tigerbeetle {
#include <tb_client.h>

constexpr size_t MAX_MESSAGE_SIZE = (1024 * 1024) - 128;
template <std::size_t N> using accountID = std::array<tb_uint128_t, N>;
template <std::size_t N> using transferID = std::array<tb_uint128_t, N>;
template <std::size_t N> using transfer = std::array<tb_transfer_t, N>;
template <std::size_t N> using account = std::array<tb_account_t, N>;
template <std::size_t N> auto make_account() { return account<N>{}; }
template <std::size_t N> auto make_transfer() { return transfer<N>{}; }
// Synchronization context between the callback and the main thread.
struct CompletionContext {
  std::array<uint8_t, MAX_MESSAGE_SIZE> reply;
  int size;
  bool completed;
};

class Client {
public:
  Client(uint32_t cluster_id, const std::string address, uint32_t packets_count,
         uintptr_t on_completion_ctx,
         void (*on_completion_fn)(uintptr_t, tb_client_t, tb_packet_t *,
                                  const uint8_t *, uint32_t))
      : client(nullptr) {
    TB_STATUS status =
        tb_client_init(&client, cluster_id, address.c_str(), address.length(),
                       packets_count, on_completion_ctx, on_completion_fn);
    if (status != TB_STATUS_SUCCESS) {
      throw std::runtime_error("Failed to initialize tb_client");
    }
  }

  Client(const Client &) = delete;
  Client &operator=(const Client &) = delete;

  Client(Client &&other) noexcept : client(nullptr) {
    std::swap(client, other.client);
  }

  Client &operator=(Client &&other) noexcept {
    if (this != &other) {
      destroy();
      std::swap(client, other.client);
    }
    return *this;
  }

  ~Client() { destroy(); }

  tb_client_t get() const { return client; }
  TB_PACKET_ACQUIRE_STATUS acquire_packet(tb_packet_t *packet) {
    return tb_client_acquire_packet(client, &packet);
  }
  void release_packet(tb_packet_t *packet) {
    tb_client_release_packet(client, packet);
  }
  void send_request(tb_packet_t *packet, CompletionContext *ctx) {
    // Submits the request asynchronously:
    ctx->completed = false;
    tb_client_submit(client, packet);
    while (!ctx->completed) {
      // Wait for completion
    }
  }

private:
  void destroy() {
    if (client != nullptr) {
      tb_client_deinit(client);
      client = nullptr;
    }
  }
  tb_client_t client;
};

inline void on_completion([[maybe_unused]] uintptr_t context,
                          [[maybe_unused]] tb_client_t client,
                          tb_packet_t *packet, const uint8_t *data,
                          uint32_t size) {
  auto ctx = static_cast<CompletionContext *>(packet->user_data);
  std::copy(data, data + size, ctx->reply.begin());
  ctx->size = size;
  ctx->completed = true;
}

enum class LogLevel {
  INFO,
  DEBUG,
  ERROR,
  WARN,
  TRACE,
};

class Logger {
public:
  static void warn(const std::string &message) {
    println(LogLevel::WARN, message);
  }
  static void trace(const std::string &message) {
    println(LogLevel::TRACE, message);
  }
  static void debug(const std::string &message) {
    println(LogLevel::DEBUG, message);
  }
  static void info(const std::string &message) {
    println(LogLevel::INFO, message);
  }
  static void error(const std::string &message) {
    println(LogLevel::ERROR, message);
  }

private:
  static fmt::color getLogLevelColor(LogLevel level) {
    switch (level) {
    case LogLevel::INFO:
      return fmt::color::green;
    case LogLevel::DEBUG:
      return fmt::color::cyan;
    case LogLevel::ERROR:
      return fmt::color::red;
    case LogLevel::WARN:
      return fmt::color::yellow;
    case LogLevel::TRACE:
      return fmt::color::white;
    }
    return static_cast<fmt::color>(
        0x000000); // Default color if the level is unknown
  }

  static void println(LogLevel level, const std::string &message) {
    fmt::color color = getLogLevelColor(level);
    fmt::print(fg(color), "[{}] {}\n", getLogLevelString(level), message);
  }

  static std::string getLogLevelString(LogLevel level) {
    switch (level) {
    case LogLevel::INFO:
      return "info";
    case LogLevel::DEBUG:
      return "debug";
    case LogLevel::ERROR:
      return "error";
    case LogLevel::WARN:
      return "warn";
    case LogLevel::TRACE:
      return "trace";
    }
    return "unknown"; // Default log level if unknown
  }
};

} // namespace tigerbeetle